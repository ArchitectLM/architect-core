/**
 * Code Generation Module
 * 
 * This module provides code generation capabilities using LLMs.
 * It can generate code for tasks, flows, and other components of the system.
 */

import { ReactiveSystem, Task, Flow } from '../../schema/types';
import { CodeGenerationOptions, CodeGenerationResult, RuntimeEvent } from '../types';

/**
 * LLM service interface
 */
interface LlmService {
  /**
   * Generates code using the LLM
   * 
   * @param prompt The prompt for the LLM
   * @param options Options for the LLM
   * @returns The generated code
   */
  generateCode(prompt: string, options: any): Promise<string>;
}

/**
 * Default LLM service that uses a mock implementation
 */
class MockLlmService implements LlmService {
  /**
   * Generates code using a mock implementation
   * 
   * @param prompt The prompt for the LLM
   * @param options Options for the LLM
   * @returns The generated code
   */
  async generateCode(prompt: string, options: any): Promise<string> {
    console.log('Using mock LLM service with prompt:', prompt);
    
    // Return a simple implementation based on the prompt
    if (prompt.includes('task')) {
      return `
/**
 * Task implementation
 */
export async function taskImplementation(input: any): Promise<any> {
  console.log('Executing task with input:', input);
  return { success: true, result: 'Task executed successfully' };
}
`;
    } else if (prompt.includes('flow')) {
      return `
/**
 * Flow implementation
 */
export function registerFlow(runtime: any): void {
  const flow = {
    id: 'sample-flow',
    name: 'Sample Flow',
    description: 'A sample flow generated by the LLM',
    steps: [
      {
        id: 'step1',
        name: 'Step 1',
        type: 'task',
        taskId: 'sampleTask'
      }
    ]
  };
  
  runtime.registerFlow(flow);
}
`;
    } else {
      return `
/**
 * Generated code
 */
export function generatedFunction(): void {
  console.log('Generated function executed');
}
`;
    }
  }
}

/**
 * Code generator that uses LLMs to generate code
 */
export class CodeGenerator {
  private llmService: LlmService;
  private eventHandlers: Record<string, ((payload: any) => void)[]> = {};

  /**
   * Creates a new instance of the CodeGenerator
   * 
   * @param llmService The LLM service to use
   */
  constructor(llmService?: LlmService) {
    this.llmService = llmService || new MockLlmService();
  }

  /**
   * Registers an event handler
   * 
   * @param event The event to handle
   * @param handler The event handler
   */
  registerEventHandler(event: string, handler: (payload: any) => void): void {
    if (!this.eventHandlers[event]) {
      this.eventHandlers[event] = [];
    }

    this.eventHandlers[event].push(handler);
  }

  /**
   * Emits an event
   * 
   * @param event The event to emit
   * @param payload The event payload
   */
  private emitEvent(event: string, payload: any): void {
    const handlers = this.eventHandlers[event] || [];
    
    for (const handler of handlers) {
      try {
        handler(payload);
      } catch (error) {
        console.error(`Error in event handler for ${event}:`, error);
      }
    }
  }

  /**
   * Generates code for a task
   * 
   * @param task The task to generate code for
   * @param system The system
   * @param options Code generation options
   * @returns The generated code
   */
  async generateTaskCode(
    task: Task,
    system: ReactiveSystem,
    options: CodeGenerationOptions
  ): Promise<CodeGenerationResult> {
    this.emitEvent(RuntimeEvent.CODE_GENERATION_STARTED, {
      type: 'task',
      id: task.id,
      options
    });

    try {
      // Create a prompt for the LLM
      const prompt = this.createTaskPrompt(task, system, options);
      
      // Generate code using the LLM
      const code = await this.llmService.generateCode(prompt, {
        language: options.language,
        framework: options.framework,
        includeComments: options.includeComments
      });
      
      // Generate tests if requested
      let tests: string | undefined;
      if (options.includeTests) {
        const testPrompt = this.createTaskTestPrompt(task, code, options);
        tests = await this.llmService.generateCode(testPrompt, {
          language: options.language,
          framework: options.framework,
          includeComments: options.includeComments
        });
      }
      
      const result: CodeGenerationResult = {
        code,
        tests,
        success: true
      };
      
      this.emitEvent(RuntimeEvent.CODE_GENERATION_COMPLETED, {
        type: 'task',
        id: task.id,
        result
      });
      
      return result;
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : String(error);
      
      const result: CodeGenerationResult = {
        code: '',
        success: false,
        error: errorMessage
      };
      
      this.emitEvent(RuntimeEvent.CODE_GENERATION_FAILED, {
        type: 'task',
        id: task.id,
        error: errorMessage
      });
      
      return result;
    }
  }

  /**
   * Generates code for a flow
   * 
   * @param flow The flow to generate code for
   * @param system The system
   * @param options Code generation options
   * @returns The generated code
   */
  async generateFlowCode(
    flow: Flow,
    system: ReactiveSystem,
    options: CodeGenerationOptions
  ): Promise<CodeGenerationResult> {
    this.emitEvent(RuntimeEvent.CODE_GENERATION_STARTED, {
      type: 'flow',
      id: flow.id,
      options
    });

    try {
      // Create a prompt for the LLM
      const prompt = this.createFlowPrompt(flow, system, options);
      
      // Generate code using the LLM
      const code = await this.llmService.generateCode(prompt, {
        language: options.language,
        framework: options.framework,
        includeComments: options.includeComments
      });
      
      // Generate tests if requested
      let tests: string | undefined;
      if (options.includeTests) {
        const testPrompt = this.createFlowTestPrompt(flow, code, options);
        tests = await this.llmService.generateCode(testPrompt, {
          language: options.language,
          framework: options.framework,
          includeComments: options.includeComments
        });
      }
      
      const result: CodeGenerationResult = {
        code,
        tests,
        success: true
      };
      
      this.emitEvent(RuntimeEvent.CODE_GENERATION_COMPLETED, {
        type: 'flow',
        id: flow.id,
        result
      });
      
      return result;
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : String(error);
      
      const result: CodeGenerationResult = {
        code: '',
        success: false,
        error: errorMessage
      };
      
      this.emitEvent(RuntimeEvent.CODE_GENERATION_FAILED, {
        type: 'flow',
        id: flow.id,
        error: errorMessage
      });
      
      return result;
    }
  }

  /**
   * Creates a prompt for generating task code
   * 
   * @param task The task to generate code for
   * @param system The system
   * @param options Code generation options
   * @returns The prompt
   */
  private createTaskPrompt(
    task: Task,
    system: ReactiveSystem,
    options: CodeGenerationOptions
  ): string {
    return `
You are an expert ${options.language} developer. Please write code for a task implementation with the following details:

Task ID: ${task.id}
Task Type: ${task.type}
Description: ${task.description || 'No description provided'}
Input: ${JSON.stringify(task.input) || 'No input specified'}
Output: ${JSON.stringify(task.output) || 'No output specified'}

${task.implementation?.type === 'function' ? `Implementation Hint: ${task.implementation.code || 'No implementation hint provided'}` : ''}

System Context:
- System ID: ${system.id}
- System Name: ${system.name}
- System Version: ${system.version}

${options.includeErrorHandling ? 'Please include proper error handling in your implementation.' : ''}
${options.includeComments ? 'Please include detailed comments explaining your implementation.' : ''}

Please provide only the code for the task implementation function in ${options.language}.
`;
  }

  /**
   * Creates a prompt for generating task tests
   * 
   * @param task The task to generate tests for
   * @param code The task implementation code
   * @param options Code generation options
   * @returns The prompt
   */
  private createTaskTestPrompt(
    task: Task,
    code: string,
    options: CodeGenerationOptions
  ): string {
    return `
You are an expert ${options.language} developer. Please write tests for the following task implementation:

Task ID: ${task.id}
Task Type: ${task.type}
Description: ${task.description || 'No description provided'}

Implementation:
\`\`\`
${code}
\`\`\`

${task.examples ? `Examples:
${JSON.stringify(task.examples, null, 2)}` : ''}

Please provide only the test code in ${options.language} using a testing framework appropriate for ${options.framework || 'the language'}.
`;
  }

  /**
   * Creates a prompt for generating flow code
   * 
   * @param flow The flow to generate code for
   * @param system The system
   * @param options Code generation options
   * @returns The prompt
   */
  private createFlowPrompt(
    flow: Flow,
    system: ReactiveSystem,
    options: CodeGenerationOptions
  ): string {
    return `
You are an expert ${options.language} developer. Please write code to register a flow with the following details:

Flow ID: ${flow.id}
Flow Name: ${flow.name}
Description: ${flow.description || 'No description provided'}
Trigger: ${flow.trigger || 'No trigger specified'}

Steps:
${JSON.stringify(flow.steps, null, 2)}

System Context:
- System ID: ${system.id}
- System Name: ${system.name}
- System Version: ${system.version}

${options.includeErrorHandling ? 'Please include proper error handling in your implementation.' : ''}
${options.includeComments ? 'Please include detailed comments explaining your implementation.' : ''}

Please provide only the code for registering the flow in ${options.language}.
`;
  }

  /**
   * Creates a prompt for generating flow tests
   * 
   * @param flow The flow to generate tests for
   * @param code The flow implementation code
   * @param options Code generation options
   * @returns The prompt
   */
  private createFlowTestPrompt(
    flow: Flow,
    code: string,
    options: CodeGenerationOptions
  ): string {
    return `
You are an expert ${options.language} developer. Please write tests for the following flow registration code:

Flow ID: ${flow.id}
Flow Name: ${flow.name}
Description: ${flow.description || 'No description provided'}

Implementation:
\`\`\`
${code}
\`\`\`

Please provide only the test code in ${options.language} using a testing framework appropriate for ${options.framework || 'the language'}.
`;
  }
} 